
#include <cstdlib>
#include <iostream>
#include <cstdio>
#include <cctype>
#include <cstring>	
#include <sstream>
#include <ctime>
#include "config.h"
#include "param_list.h"
#include "random.h"
#include "sequence.h"
#include "runner.h"
#include "extender.h"
#include "scorer.h"
#include "strategy.h"
#include "stream_printf.h"
#include "mover.h"

// static data members

const char Config::c_continue_char = '+';
const int Config::c_default_runs = 1;
bool Config::m_instantiated = false;
std::string Config::m_cmd;

// globals

// since it affects a large amount of the program, the "reverse saint"
// flag is globally accessible (if true, the peptide is extruded from
// the C to N terminus instead of N to C)

bool reverseSaint = false;

// macro to call another macro for each section's class; for example:
//
// #define PRINT_TEMPLATE(C) C::print_template()
// for_each_section(PRINT_TEMPLATE);

#define for_each_section(MACRO_NAME) \
do { \
	MACRO_NAME(Sequence); \
	MACRO_NAME(Runner); \
	MACRO_NAME(Extender); \
	MACRO_NAME(Scorer); \
	MACRO_NAME(Strategy); \
	MACRO_NAME(Mover); \
} while (0)

// macro to call another macro for each section's class and its
// corresponding enum value; for example:
//
// #define ASSIGN_NAME(C,T) name[T] = C::name();
// for_each_section_type(ASSIGN_NAME);

#define for_each_section_type(MACRO_NAME) \
do { \
	MACRO_NAME(Sequence, S_Sequence); \
	MACRO_NAME(Runner,   S_Runner); \
	MACRO_NAME(Extender, S_Extend); \
	MACRO_NAME(Scorer,   S_Scoring); \
	MACRO_NAME(Strategy, S_Strategy); \
	MACRO_NAME(Mover,    S_Movement); \
} while (0)

Config::Config(int argc, const char *argv[]) :
	m_config_line_num(0), m_num_runs(c_default_runs),
	m_show_torsion_angles(false), m_backbone_only(true),
	m_verbose(false), m_pdb_chain(' ')
{
	m_cmd = argv[0];

	// make sure there is only one object of this class 
	if (m_instantiated)
	{
		std::cerr << m_cmd
			<< ": Internal error: more than one Config object ("
			<< __FILE__ << ", line " << __LINE__ << ")\n";
		exit(1);
	}

	m_instantiated = true;

	// initialise m_section_name array
#define ASSIGN_NAME(C,T) m_section_name[T] = C::config_section();
	for_each_section_type(ASSIGN_NAME);
#undef ASSIGN_NAME

	m_rnd_seed = time(NULL);
	parse(argc, argv);
}

Config::~Config()
{
}

void Config::show_usage()
{
	std::cerr << "Saint 2 version " << SAINT2_VERSION
		<< ", compiled " << __DATE__ << " " << __TIME__
		<< "\n\n"
		<< "Usage: "
		<< m_cmd << " <config filename> [options ...]\n"
		"\n"
		"Option                      Description\n\n"
		"-[h?]                       Show this help\n"
		"-- <pdb> [chain] [-t] [-a|b]  Print information about specified "
			"PDB file and exit\n"
		"                            (-t shows torsion angles, otherwise finds "
			"score)\n"
		"                            (-a uses all atoms, -b uses backbone atoms only (default))\n"
		"-c                          Create a default configuration file\n"
		"-n number                   Number of runs to perform (default "
			<< c_default_runs << ")\n"
		"-s number                   Random number seed\n"
		"-o filename                 Output file\n"
		"-v                          Verbose scoring\n"
		"\n"
		"Configuration file parameters may be specified on the command "
		"line. Section headers ([Sequence] etc.) "
		"have no brackets and must start with \"-\", and may "
		"be abbreviated (eg. -seq file=abc.fasta).\n"
		"\n";
}

void Config::parse(int argc, const char *argv[])
{
	if (argc == 1)
	{
		show_usage();
		exit(0);
	}

	for (int arg = 1;arg < argc;arg++)
	{
		if (argv[arg][0] == '-')
		{
			parse_option(&arg, argc, argv);
		}
		else
		{
			if (!m_config_filename.empty())
			{
				std::cerr << m_cmd
					<< ": only one configuration file permitted\n";
				exit(1);
			}
			else
			{
				m_config_filename = argv[arg];
				read_config_file();
			}
		}
	}

	Random::set_seed(m_rnd_seed);

	// Config doesn't have enough information to check all of the
	// configuration options at this point; other objects such
	// as Runner and Sequence need to check for missing or
	// illegal options
}

void Config::parse_option(int *arg, int argc, const char *argv[])
{
	// remove leading "-"
	std::string op(argv[*arg] + 1);

	if (op == "a")
	{
		m_backbone_only = false;
	}
	else
	if (op == "b")
	{
		m_backbone_only = true;
	}
	else
	if (op == "c")
	{
		print_config_template();
		exit(0);
	}
	else
	if (op == "h" || op == "?" || op == "")
	{
		show_usage();
		exit(0);
	}
	else
	if (op == "n")
	{
		(*arg)++;
		check_end_of_args(*arg, argc, op);
		m_num_runs = parse_integer(argv[*arg], "number of runs", 1);
	}
	else
	if (op == "s")
	{
		(*arg)++;
		check_end_of_args(*arg, argc, op);
		m_rnd_seed = parse_integer(argv[*arg], "random number seed");
	}
	else
	if (op == "t")
	{
		m_show_torsion_angles = true;
	}
	else
	if (op == "o")
	{
		(*arg)++;
		check_end_of_args(*arg, argc, op);
		m_outfile = argv[*arg];
	}
	else
	if (op == "v")
	{
		m_verbose = true;
	}
	else
	if (op == "-")
	{
		(*arg)++;
		check_end_of_args(*arg, argc, op);
		m_pdb_filename = argv[*arg];

		// check if a chain id was specified as well
		if (*arg + 1 < argc)
		{
			std::string chain(argv[(*arg)+1]);

			if (chain[0] != '-' && chain.length() == 1)
			{
				(*arg)++;
				m_pdb_chain = toupper(chain[0]);
			}
		}
	}
	else
	if (!parse_section_args(arg, argc, argv))
	{
		std::cerr << m_cmd << ": unknown option -" << op << "\n\n";
		exit(1);
	}
}

void Config::check_end_of_args(int arg, int argc, const std::string &option)
{
	if (arg >= argc)
	{
		std::cerr << m_cmd << ": missing value after -" << option << "\n";
		exit(1);
	}
}

bool Config::parse_section_args(int *arg, int argc, const char *argv[])
{
	std::string str = tolower(argv[*arg] + 1);	// remove leading "-"
	Section sec = S_None;

	for (int s = 0;s < (int) Num_Sections;s++)
	{
		if (m_section_name[s].substr(0, str.length()) == str)
		{
			if (sec == S_None)
			{
				sec = (Section) s;
			}
			else
			{
				std::cerr << m_cmd << ": -" << str
					<< " is ambiguous (could mean \""
					<< m_section_name[sec]
					<< "\" or \""
					<< m_section_name[s]
					<< "\")\n\n";
				exit(1);
			}
		}
	}

	if (sec == S_None)
	{
		return false;
	}

	(*arg)++;
	parse_param_args(sec, arg, argc, argv);

	// this function is called inside the loop in Config::parse(),
	// which increments arg each time, so go back one
	(*arg)--;
	return true;
}

void Config::parse_param_args(Section sec, int *arg, int argc,
	const char *argv[])
{
	for ( ;*arg < argc;(*arg)++)
	{
		const char *a = argv[*arg];
		const char *p = strchr(a, '=');

		if (p == NULL)
		{
			return;
		}

		std::string name = tolower(std::string(a, p - a));
		std::string value(p + 1);
		insert(m_param[sec], name, value, m_section_name[sec]);
	}
}

void Config::missing_parameter(const char *section,
	const char *type, const char *param_name)
{
    std::cerr << m_cmd << ": " << section;

	if (type != NULL && *type)
	{
		std::cerr << " type \"" << type << "\"";
	}

	std::cerr
        << " requires parameter \""
        << param_name
        << "\" to be specified\n";
    exit(1);
}

void Config::read_config_file()
{
	FILE *file = fopen(m_config_filename.c_str(), "r");

	if (file == NULL)
	{
		std::cerr << m_cmd
			<< ": cannot open configuration file "
			<< m_config_filename
			<< "\n";
		exit(1);
	}

	const unsigned int Max_Len = 1000;
	char buffer[Max_Len + 2];			// two extra chars for "\n\0"
	Section curr_section = S_None;
	m_config_line_num = 0;
	std::string param_name;

	while (fgets(buffer, Max_Len + 2, file) != NULL)
	{
		m_config_line_num++;

		if (strlen(buffer) == Max_Len + 1)
		{
			std::cerr << m_cmd << ": error on line "
				<< m_config_line_num
				<< " of config file " << m_config_filename
				<< ": line too long (max length "
				<< Max_Len
				<< "). Lines may be continued with \""
				<< c_continue_char
				<< "\" at the start of the next line.\n";
			exit(1);
		}

		char *s = buffer;

		for ( ;isspace(*s);s++)
		{ }
		
		if (*s == '\0' || *s == '#')
		{
			param_name.clear();   // don't allow "+" on next line
			continue;
		}

		if (*s == '[')
		{
			// (exits with a message on error)
			curr_section = parse_section_name(s + 1);
			param_name.clear();   // don't allow "+" on next line
		}
		else
		{
			if (curr_section == S_None)
			{
				std::cerr << m_cmd << ": error on line "
					<< m_config_line_num << " of " << m_config_filename
					<< ": config file must start with a section name, eg. "
						"[Sequence]\n";
				exit(1);
			}

			// remove trailing newline
			int len = strlen(s);

			if (len > 0 && s[len - 1] == '\n')
			{
				s[len - 1] = '\0';
			}

			parse_config_param(curr_section, param_name, s);
		}
	}

	fclose(file);
	verify_interdependent_params();
}

void Config::verify_interdependent_params()
{
	std::string *ex_type = find(m_param[S_Extend], "type");

	if (ex_type != NULL && *ex_type == "codon")
	{
		std::string *s_type = find(m_param[S_Sequence], "type");

		if (s_type == NULL || *s_type == "amino")
		{
			std::cerr << "Error in configuration file " << m_config_filename
				<< ": extension type \"codon\" requires sequence type "
					"\"nucleotide\", not \"amino\"\n";
			exit(1);
		}
	}
}

Config::Section Config::parse_section_name(const char *str)
{
	int pos;

	for (pos = 0;str[pos] && str[pos] != ']';pos++)
	{ }

	std::string name_case_unchanged(str, pos);
	std::string name = tolower(name_case_unchanged);

	for (int s = 0;s < (int) Num_Sections;s++)
	{
		if (name == m_section_name[s])
		{
			return (Section) s;
		}
	}

	std::cerr << m_cmd << ": error on line "
		<< m_config_line_num << " of " << m_config_filename
		<< ": unknown section ["
		<< name_case_unchanged
		<< "]\n";
	exit(1);
}

void Config::parse_config_param(Section sec, std::string &name,
	const char *str)
{
	// at this point, leading white space has been skipped,
	// and the line is known not to be a comment

	bool append = false;
	const char *p = str;

	if (*str == c_continue_char)
	{
		if (name.empty())
		{
			std::cerr << m_cmd << ": error on line "
				<< m_config_line_num << " of " << m_config_filename
				<< ": \"" << c_continue_char
				<< "\" can only be used to continue the previous line\n";
			exit(1);
		}

		append = true;
	}
	else
	{
		append = false;
		const char *last = str;

		// find "=" character

		for ( ;*p && *p != '=';p++)
		{
			if (*p == '#')
			{
				file_syntax_error();
			}

			// remember the last non-whitespace character
			if (!isspace(*p))
			{
				last = p;
			}
		}

		if (*p != '=')
		{
			file_syntax_error();
		}

		name = tolower(std::string(str, last - str + 1));
	}

	// find the start of the value

	for (p++;isspace(*p);p++)
	{ }

	const char *start = p;
	char terminator;

	if (*p == '"')
	{
		// quoted string
		start++;
		terminator = '"';
	}
	else
	{
		// unquoted string
		terminator = '#';
	}

	// find the end of the value

	for (p++;*p && *p != terminator;p++)
	{
		if (*p == '\\')
		{
			// skip the escaped character
			p++;

			if (*p == '\0')
			{
				break;
			}
		}
	}

	// check the end of the value

	if (terminator == '#')
	{
		// unquoted string; remove trailing spaces

		for (p--;p >= start && isspace(*p);p--)
		{ }

		p++;
	}
	else
	{
		// quoted string; check for trailing characters

		if (*p == '"')
		{
			const char *q;
			for (q = p + 1;isspace(*q);q++)
			{ }

			if (*q && *q != '#')
			{
				file_syntax_error();
			}
		}
	}

	std::string value(start, p - start);
	transform_escape_sequences(value);

	if (append)
	{
		append_to_value(m_param[sec], name, value);
	}
	else
	{
		insert(m_param[sec], name, value, m_section_name[sec]);
	}
}

void Config::transform_escape_sequences(std::string &str)
{
	for (unsigned int n = 0;n < str.length();n++)
	{
		if (str[n] == '\\')
		{
			str.erase(n, 1);
			// n will be incremented past the escaped character
		}
	}
}

void Config::file_syntax_error()
{
	std::cerr << m_cmd << ": syntax error on line "
		<< m_config_line_num << " of " << m_config_filename
		<< "\n";
	exit(1);
}

void Config::print_config_template()
{
#define PRINT_TEMPLATE(C) C::print_template(std::cout)
	for_each_section(PRINT_TEMPLATE);
#undef PRINT_TEMPLATE
}

void Config::create_sequence(Sequence *s) const
{
	s->create_from_params(m_param[S_Sequence]);
}

void Config::init_runner(Runner *r) const
{
	// print_params();
	r->set_num_runs(m_num_runs);
	std::cout << "Num Runs OK!\n";
	r->parse_params(m_param[S_Runner]);
	std::cout << "Runner OK!\n";
	r->set_extender(Extender::create(m_param[S_Extend]));
	std::cout << "Extend OK!\n";
	r->set_scorer(Scorer::create(m_param[S_Scoring]));
	std::cout << "Scoring OK!\n";
	r->scorer()->set_verbose(m_verbose);
	std::cout << "Verbose OK!\n";
	r->set_strategy(Strategy::create(m_param[S_Strategy]));
	std::cout << "Strategy OK!\n";
	r->set_mover(Mover::create(m_param[S_Movement]));
	std::cout << "Movement OK!\n";
}

void Config::print_params() const
{
	for (int s = 0;s < Num_Sections;s++)
	{
		std::cout << "[" << capitalise(m_section_name[s]) << "]\n";

		Param_List::const_iterator i = m_param[s].begin();
		Param_List::const_iterator end = m_param[s].end();

		for ( ;i != end;++i)
		{
			std::cout
				<< i->name << " = \""
				<< i->value << "\"\n";
		}
	}
}

const std::string Config::outfilename(int run_number) const
{
	if (m_outfile.empty() || m_num_runs <= 1)
	{
		return m_outfile;
	}

	std::ostringstream name;
	name << m_outfile << Printf("_%03d", run_number);
	return name.str();
}


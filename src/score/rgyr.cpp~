// -*- mode: c++; c-file-style: "ellemtel"; encoding: utf-8; -*-
//
// Copyright (C) 2012 Saulo H. P. de Oliveira
//
// Saulo H. P. de Oliveira <saulo.deoliveira@pmb.ox.ac.uk>
// 2012-08-23
//
// Radius of Gyration scoring method.
//
// A scoring class that calculates the Radius of gyration (Rg) of the growing peptide 
// and adds a score penalty proportional to the difference between the expected
// Rg.

#include <string>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <iostream>
#include <fstream>

#include "peptide.h"
#include "atom.h"
#include "atom_id.h"
#include "scorer_combined.h"
#include "rgyr.h"

Rgyr::Rgyr()
{
}

Rgyr::~Rgyr()
{
}

double Rgyr::score(const Peptide& p, bool verbose) const
{
	int len = p.length(),N=0;	
	double rg=0.0, total=0.0;
	Point centroid;

	centroid.x = 0.0;
	centroid.y = 0.0;
	centroid.z = 0.0;

	for (int n1 = p.start();n1 <= p.end(); n1++)
	{
		for (int a1 = 0; a1 < Num_Backbone; a1++)
		{
			if (!p.atom_exists(n1, (Atom_Id) a1))
			{
				continue;
			}
			Point p1 = p.atom_pos(n1, (Atom_Id) a1);
			centroid.x += p1.x;
			centroid.y += p1.y;
			centroid.z += p1.z;
			N++;
		}
	}
	centroid.x/=(double)N;
	centroid.y/=(double)N;
	centroid.z/=(double)N;


	for (int n1 = p.start();n1 <= p.end(); n1++)
	{
		for (int a1 = 0; a1 < Num_Backbone; a1++)
		{
			if (!p.atom_exists(n1, (Atom_Id) a1))
			{
				continue;
			}
			Point p1 = p.atom_pos(n1, (Atom_Id) a1);
			rg += pow(p1.x -centroid.x,2) + pow(p1.y -centroid.y,2) + pow(p1.z -centroid.z,2);
		}
	}

	rg = rg/((double)N);
	rg = sqrt(rg);
//	std::cout << "Computed Rgyr: " << rg << "\tRadius obtained from SAINT2: " << p.radius_of_gyr() << "\n" ;
	total = p.radius_of_gyr();

#ifndef RAW_SCORE
	// Alter the score so that it has about the same distribution
	// for all lengths
	total /= sqrt((double) len);
	// normalise so that all score types have approximately the same range
	total = total * 28.0 + 50.0;
#endif // RAW_SCORE

	//std::cout << "Total = " << total << " !!\n";	
	return total;
}

